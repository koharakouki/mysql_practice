-- 色々な条件で抽出する

-- テーブルの準備

$ use db1

$ CREATE TABLE tb(bang VARCHAR(10), uria INT, tuki INT);

$ INSERT INTO tb (bang, uria, tuki) VALUES('A103', 101, 4), ('A102', 54, 5), ('A104', 181, 4), ('A101', 184, 4), ('A103', 17, 5), ('A101', 300, 5), ('A102', 205, 6), ('A104', 93, 5), ('A103', 12, 6), ('A107', 87, 6);

-- これで練習用のテーブルは作成できた

●カラムを入れ替えて表示する--------------------------------------------

$ SELECT uria,bang FROM tb;
-- +------+------+
-- | uria | bang |
-- +------+------+
-- |  101 | A103 |
-- |   54 | A102 |
-- |  181 | A104 |
-- |  184 | A101 |
-- |   17 | A103 |
-- |  300 | A101 |
-- |  205 | A102 |
-- |   93 | A104 |
-- |   12 | A103 |
-- |   87 | A107 |
-- +------+------+
-- 10 rows in set (0.00 sec)


●カラム名をわかりやすいようにエイリアスを使う------------------------------------------

$ SELECT カラム名 AS エイリアス FROM テーブル名;

$ SELECT bang AS 社員番号, uria AS 売上 FROM tb;

-- +--------------+--------+
-- | 社員番号     | 売上   |
-- +--------------+--------+
-- | A103         |    101 |
-- | A102         |     54 |
-- | A104         |    181 |
-- | A101         |    184 |
-- | A103         |     17 |
-- | A101         |    300 |
-- | A102         |    205 |
-- | A104         |     93 |
-- | A103         |     12 |
-- | A107         |     87 |
-- +--------------+--------+
-- 10 rows in set (0.00 sec)


●カラムの値で計算して表示する-------------------------------------

$ SELECT uria*10000 as 売上 FROM tb;

-- +---------+
-- | 売上    |
-- +---------+
-- | 1010000 |
-- |  540000 |
-- | 1810000 |
-- | 1840000 |
-- |  170000 |
-- | 3000000 |
-- | 2050000 |
-- |  930000 |
-- |  120000 |
-- |  870000 |
-- +---------+
-- 10 rows in set (0.00 sec)

●関数を使って計算する--------------------------------

・AVERAGE関数
$ SELECT AVG(uria) as 売上平均 FROM tb;

-- +--------------+
-- | 売上平均     |
-- +--------------+
-- |     123.4000 |
-- +--------------+
-- 1 row in set (0.00 sec)

・SUM関数
$ SELECT SUM(uria) as 売上合計 FROM tb;

-- +--------------+
-- | 売上合計     |
-- +--------------+
-- |         1234 |
-- +--------------+
-- 1 row in set (0.00 sec)

・COUNT関数
$ SELECT COUNT(uria) as 売上件数 FROM tb;

-- +--------------+
-- | 売上件数     |
-- +--------------+
-- |           10 |
-- +--------------+
-- 1 row in set (0.00 sec)


●各種情報を表示する関数--------------------------------

・MySQLサーバーのバージョンを表示
$ SELECT VERSION();

-- +-----------+
-- | VERSION() |
-- +-----------+
-- | 5.7.26    |
-- +-----------+
-- 1 row in set (0.00 sec)


・現在使っているデータベースを表示
$ SELECT DATABASE();

-- +------------+
-- | DATABASE() |
-- +------------+
-- | db1        |
-- +------------+
-- 1 row in set (0.00 sec)

・現在のユーザーを表示
$ SELECT USER();

-- +----------------+
-- | USER()         |
-- +----------------+
-- | root@localhost |
-- +----------------+
-- 1 row in set (0.00 sec)

・引数指定した文字の文字エンコーディングを表示
$ SELECT CHARSET('この文字');

-- +-------------------------+
-- | CHARSET('この文字')     |
-- +-------------------------+
-- | utf8                    |
-- +-------------------------+
-- 1 row in set (0.00 sec)


●文字列を結合する-------------------------------------------------

$ SELECT CONCAT(bang, name, 'さん') as 社員番号と名前 FROM tb1;

-- +-----------------------+
-- | 社員番号と名前        |
-- +-----------------------+
-- | A101佐藤さん          |
-- | A102高橋さん          |
-- | A103中川さん          |
-- | A104渡辺さん          |
-- | A105西沢さん          |
-- +-----------------------+
-- 5 rows in set (0.00 sec)


●文字列操作で活躍する関数----------------------------------------

・右から取り出す：RIGHT関数

$ SELECT RIGHT(bang, 2) FROM tb1;

-- +----------------+
-- | RIGHT(bang, 2) |
-- +----------------+
-- | 01             |
-- | 02             |
-- | 03             |
-- | 04             |
-- | 05             |
-- +----------------+
-- 5 rows in set (0.01 sec)

・左から取り出す：LEFT関数

$ SELECT LEFT(bang, 2) FROM tb1;

-- +---------------+
-- | LEFT(bang, 2) |
-- +---------------+
-- | A1            |
-- | A1            |
-- | A1            |
-- | A1            |
-- | A1            |
-- +---------------+
-- 5 rows in set (0.00 sec)

・×番目から△個取り出す： SUBSTRING関数

$ SELECT SUBSTRING(bang, 2, 3) FROM tb1;

-- +-----------------------+
-- | SUBSTRING(bang, 2, 3) |
-- +-----------------------+
-- | 101                   |
-- | 102                   |
-- | 103                   |
-- | 104                   |
-- | 105                   |
-- +-----------------------+
-- 5 rows in set (0.00 sec)

・繰り返して表示：REPEAT関数

$ SELECT REPEAT('.', tosi) FROM tb1;

-- +------------------------------------------+
-- | REPEAT('.', tosi)                        |
-- +------------------------------------------+
-- | ........................................ |
-- | ............................             |
-- | ....................                     |
-- | .......................                  |
-- | ...................................      |
-- +------------------------------------------+
-- 5 rows in set (0.00 sec)

・逆さから表示：REVERSE関数

$ SELECT REVERSE(nama) FROM tb1;

-- +---------------+
-- | REVERSE(nama) |
-- +---------------+
-- | 藤佐          |
-- | 橋高          |
-- | 川中          |
-- | 辺渡          |
-- | 沢西          |
-- +---------------+
-- 5 rows in set (0.00 sec)


●日付・時刻の関数----------------------------------------------

$ CREATE TABLE ima (a INT AUTO_INCREMENT PRIARY KEY, b DATETIME);

$ INSERT INTO ima (b) VALUES(NOW());
$ INSERT INTO ima (b) VALUES(NOW());

$ SELECT * FROM ima;

-- +---+---------------------+
-- | a | b                   |
-- +---+---------------------+
-- | 1 | 2020-08-30 12:42:21 |
-- | 2 | 2020-08-30 12:42:22 |
-- +---+---------------------+
-- 2 rows in set (0.00 sec)



-- ＊条件を指定した選択
●レコード数を決めて表示する---------------------------------------------

$ SELECT カラム名 FROM テーブル名 LIMIT 表示するレコード数;

$ SELECT * FROM tb LIMIT 3;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A103 |  101 |    4 |
-- | A102 |   54 |    5 |
-- | A104 |  181 |    4 |
-- +------+------+------+
-- 3 rows in set (0.00 sec)


●WHEREを使った抽出--------------------------------------------

$ SELECT カラム名 FROM テーブル名 WHERE 条件;

$ SELECT * FROM tb WHERE uria >= 100;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A103 |  101 |    4 |
-- | A104 |  181 |    4 |
-- | A101 |  184 |    4 |
-- | A101 |  300 |    5 |
-- | A102 |  205 |    6 |
-- +------+------+------+
-- 5 rows in set (0.00 sec)


●文字列を使った条件-------------------------------------------

$ SELECT * FROM tb WHERE bang="A101";

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  184 |    4 |
-- | A101 |  300 |    5 |
-- +------+------+------+
-- 2 rows in set (0.00 sec)

・あいまい検索
$ SELECT * FROM tb WHERE bang LIKE 'A101';

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  184 |    4 |
-- | A101 |  300 |    5 |
-- +------+------+------+
-- 2 rows in set (0.00 sec)

$ SELECT * FROM tb WHERE bang LIKE '%1';

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  184 |    4 |
-- | A101 |  300 |    5 |
-- +------+------+------+
-- 2 rows in set (0.00 sec)

・指定した文字列を含まないものを取り出す---------------------------------------
$ SELECT * FROM tb1 WHERE nama NOT LIKE '佐%';

-- +------+--------+------+
-- | bang | nama   | tosi |
-- +------+--------+------+
-- | A102 | 高橋   |   28 |
-- | A103 | 中川   |   20 |
-- | A104 | 渡辺   |   23 |
-- | A105 | 西沢   |   35 |
-- +------+--------+------+
-- 4 rows in set (0.00 sec)


●NULLを使った条件--------------------------------------
・NULLの場合
$ SELECT * FROM tb1H WHERE tosi IS NULL;

・NULLでない場合
$ SELECT * FROM tb1H WHERE tosi IS NOT NULL;


●重複したダータを省く

$ SELECT bang FROM tb;

-- A103,A101,104が重複している
-- +------+
-- | bang |
-- +------+
-- | A103 |
-- | A102 |
-- | A104 |
-- | A101 |
-- | A103 |
-- | A101 |
-- | A102 |
-- | A104 |
-- | A103 |
-- | A107 |
-- +------+
-- 10 rows in set (0.00 sec)

$ SELECT DISTINCT bang FROM tb;

-- +------+
-- | bang |
-- +------+
-- | A103 |
-- | A102 |
-- | A104 |
-- | A101 |
-- | A107 |
-- +------+
-- 5 rows in set (0.00 sec)


＊複数の条件を指定した選択
●ANDを使う(○○であり、かつ××である)------------------------------------

$ SELECT * FROM tb WHERE uria>=50 AND uria<=100;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A102 |   54 |    5 |
-- | A104 |   93 |    5 |
-- | A107 |   87 |    6 |
-- +------+------+------+
-- 3 rows in set (0.00 sec)


●ORを使う(○○であるか、または××である)---------------------------------

$ SELECT * FROM tb WHERE uria<50 OR uria>200;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A103 |   17 |    5 |
-- | A101 |  300 |    5 |
-- | A102 |  205 |    6 |
-- | A103 |   12 |    6 |
-- +------+------+------+
-- 4 rows in set (0.00 sec)


●ANDやORを複数使う--------------------------------

「bangが'A101'」でなおかつ「tukiが4」、または「uriaが200以上」
$ SELECT * FROM tb WHERE bang LIKE '%1' AND tuki=4 OR uria>=200;
(ANDとORが混ざっているときは、ANDが優先して処理される)

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  184 |    4 |
-- | A101 |  300 |    5 |
-- | A102 |  205 |    6 |
-- +------+------+------+
-- 3 rows in set (0.00 sec)


「uriaが200以上、またはbangが'A101'」でなおかつ「tukiが4」
$ SELECT * FROM tb WHERE (uria>=200 OR bang LIKE '%1') AND tuki=4;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  184 |    4 |
-- +------+------+------+
-- 1 row in set (0.00 sec)


●CASE WHEN を使う-------------------------------

$ CASE
      WHEN 条件1 THEN 表示する値
      WHEN 条件2 THEN 表示する値
      WHEN 条件3 THEN 表示する値
  ELSE すべての条件に当てはまらない時の値
  END

売上が100以上の場合は「多い」、50以上なら「中くらい」、そうでなければ「少ない」とする

$ SELECT
  CASE
      WHEN uria>=100 THEN '多い'
      WHEN uria>=50  THEN '中くらい'
      ELSE '少ない'
  END
  FROM tb;

-- ↓かなりみづらい
-- +---------------------------------------------------------------------------------------------------------------+
-- | CASE
--       WHEN uria>=100 THEN '多い'
--       WHEN uria>=50  THEN '中くらい'
--       ELSE '少ない'
--   END          |
-- +---------------------------------------------------------------------------------------------------------------+
-- | 多い                                                                                                          |
-- | 中くらい                                                                                                      |
-- | 多い                                                                                                          |
-- | 多い                                                                                                          |
-- | 少ない                                                                                                        |
-- | 多い                                                                                                          |
-- | 多い                                                                                                          |
-- | 中くらい                                                                                                      |
-- | 少ない                                                                                                        |
-- | 中くらい                                                                                                      |
-- +---------------------------------------------------------------------------------------------------------------+


$ SELECT bang, uria,
  CASE
      WHEN uria>=100 THEN '多い'
      WHEN uria>=50  THEN '中くらい'
      ELSE '少ない'
  END AS 評価
  FROM tb;

-- +------+------+--------------+
-- | bang | uria | 評価         |
-- +------+------+--------------+
-- | A103 |  101 | 多い         |
-- | A102 |   54 | 中くらい     |
-- | A104 |  181 | 多い         |
-- | A101 |  184 | 多い         |
-- | A103 |   17 | 少ない       |
-- | A101 |  300 | 多い         |
-- | A102 |  205 | 多い         |
-- | A104 |   93 | 中くらい     |
-- | A103 |   12 | 少ない       |
-- | A107 |   87 | 中くらい     |
-- +------+------+--------------+
-- 10 rows in set (0.00 sec)


＊並べ替え
●昇順に並べ替えて表示する----------------------------------------

$ SELECT カラム名 FROM テーブル名 ORDER BY キーとなるカラム;

$ SELECT * FROM tb ORDER BY uria;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A103 |   12 |    6 |
-- | A103 |   17 |    5 |
-- | A102 |   54 |    5 |
-- | A107 |   87 |    6 |
-- | A104 |   93 |    5 |
-- | A103 |  101 |    4 |
-- | A104 |  181 |    4 |
-- | A101 |  184 |    4 |
-- | A102 |  205 |    6 |
-- | A101 |  300 |    5 |
-- +------+------+------+
-- 10 rows in set (0.00 sec)

※何もつけないと昇順になるが、明示するときはASCをつける

$ SELECT * FROM tb ORDER BY uria ASC;


●降順に並べて表示する---------------------------------------

$ SELECT * FROM tb ORDER BY uria DESC LIMIT 5;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  300 |    5 |
-- | A102 |  205 |    6 |
-- | A101 |  184 |    4 |
-- | A104 |  181 |    4 |
-- | A103 |  101 |    4 |
-- +------+------+------+
-- 5 rows in set (0.00 sec)


●表示するレコードの範囲を決める---------------------------------------

$ SELECT カラム名 FROM テーブル名 LIMIT 表示するレコード数 OFFSET 表示開始レコードのシフト数;

$ SELECT * FROM tb ORDER BY uria DESC LIMIT 2 OFFSET 3;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A104 |  181 |    4 |
-- | A103 |  101 |    4 |
-- +------+------+------+
-- 2 rows in set (0.00 sec)


＊グループごとに表示する

●グループごとに表示する-------------------------------------------------
$ SELECT カラム名 FROM テーブル名 GROUP BY グループ化するカラム名;

$ SELECT * FROM tb GROUP BY bang, uria, tuki;

-- +------+------+------+
-- | bang | uria | tuki |
-- +------+------+------+
-- | A101 |  184 |    4 |
-- | A101 |  300 |    5 |
-- | A102 |   54 |    5 |
-- | A102 |  205 |    6 |
-- | A103 |   12 |    6 |
-- | A103 |   17 |    5 |
-- | A103 |  101 |    4 |
-- | A104 |   93 |    5 |
-- | A104 |  181 |    4 |
-- | A107 |   87 |    6 |
-- +------+------+------+
-- 10 rows in set (0.00 sec)


●グループごとの数を数える------------------------------------------------

$ SELECT COUNT(*) FROM tb GROUP BY bang;

-- +----------+
-- | COUNT(*) |
-- +----------+
-- |        2 |
-- |        2 |
-- |        3 |
-- |        2 |
-- |        1 |
-- +----------+
-- 5 rows in set (0.01 sec)

$ SELECT bang, COUNT(*) AS 件数 FROM tb GROUP BY bang;

-- +------+--------+
-- | bang | 件数   |
-- +------+--------+
-- | A101 |      2 |
-- | A102 |      2 |
-- | A103 |      3 |
-- | A104 |      2 |
-- | A107 |      1 |
-- +------+--------+
-- 5 rows in set (0.01 sec)


●グループごとの合計・平均を表示する-----------------------------------------------

$ SELECT bang, SUM(uria) AS 合計 FROM tb GROUP BY bang;

-- +------+--------+
-- | bang | 合計   |
-- +------+--------+
-- | A101 |    484 |
-- | A102 |    259 |
-- | A103 |    130 |
-- | A104 |    274 |
-- | A107 |     87 |
-- +------+--------+
-- 5 rows in set (0.00 sec)


$ SELECT bang, AVG(uria) as 平均 FROM tb GROUP BY bang;

-- +------+----------+
-- | bang | 平均     |
-- +------+----------+
-- | A101 | 242.0000 |
-- | A102 | 129.5000 |
-- | A103 |  43.3333 |
-- | A104 | 137.0000 |
-- | A107 |  87.0000 |
-- +------+----------+
-- 5 rows in set (0.00 sec)


＊条件付きグループで表示-----------------------------------------------
●グループごとに処理をする-----------------------------------------------
※グループ化したものに対して処理をする

$ SELECT 集計したカラム FROM テーブル名 GROUP BY グループ化するカラム名 HAVING 条件;

$ SELECT bang, SUM(uria) AS 売上合計 FROM tb GROUP BY bang HAVING SUM(uria) >= 200;

-- +------+--------------+
-- | bang | 売上合計     |
-- +------+--------------+
-- | A101 |          484 |
-- | A102 |          259 |
-- | A104 |          274 |
-- +------+--------------+
-- 3 rows in set (0.00 sec)

●抽出してからグループ化する----------------------------------------------

$ SELECT bang, AVG(uria) AS 平均 FROM tb WHERE uria >= 50 GROUP BY bang;

-- +------+----------+
-- | bang | 平均     |
-- +------+----------+
-- | A101 | 242.0000 |
-- | A102 | 129.5000 |
-- | A103 | 101.0000 |
-- | A104 | 137.0000 |
-- | A107 |  87.0000 |
-- +------+----------+
-- 5 rows in set (0.00 sec)


●グループ化してから並べ替える----------------------------------------------

$ SELECT bang, AVG(uria) FROM tb GROUP BY bang ORDER BY AVG(uria) DESC;

-- +------+-----------+
-- | bang | AVG(uria) |
-- +------+-----------+
-- | A101 |  242.0000 |
-- | A104 |  137.0000 |
-- | A102 |  129.5000 |
-- | A107 |   87.0000 |
-- | A103 |   43.3333 |
-- +------+-----------+
-- 5 rows in set (0.00 sec)

$ SELECT bang, AVG(uria) FROM tb WHERE uria >= 50 GROUP BY bang ORDER BY AVG(uria) DESC;

-- +------+-----------+
-- | bang | AVG(uria) |
-- +------+-----------+
-- | A101 |  242.0000 |
-- | A104 |  137.0000 |
-- | A102 |  129.5000 |
-- | A103 |  101.0000 |
-- | A107 |   87.0000 |
-- +------+-----------+
-- 5 rows in set (0.00 sec)

$ SELECT bang, AVG(uria)
    FROM tb
   WHERE uria >= 50
   GROUP BY bang
   HAVING AVG(uria) >= 120
   ORDER BY AVG(uria) DESC;

-- +------+-----------+
-- | bang | AVG(uria) |
-- +------+-----------+
-- | A101 |  242.0000 |
-- | A104 |  137.0000 |
-- | A102 |  129.5000 |
-- +------+-----------+
-- 3 rows in set (0.00 sec)

